#!/usr/bin/env python3

import os
import json
import requests
import argparse
import re
from libnmap.process import NmapProcess
from libnmap.parser import NmapParser, NmapParserException

options = ''

# set parameters
parser = argparse.ArgumentParser()
parser.add_argument('-u', type=str, help='U = url or ip address, e.g. by.cuc.edu.cn')
parser.add_argument('-p', type=str, help='P = port, e.g. 80, 443')
args = parser.parse_args()
scan = args.u
port_scan = args.p

if port_scan:
    if re.match("^([1-9]+[0-9]+,)*[1-9]+[0-9]+$",port_scan) != None:
        options = str(port_scan)
    else:
        parser.print_help()
        parser.exit()

# start a new nmap scan on localhost with some specific options
def nmap_scan(targets, options):
    nmap_report = None
    nmproc = NmapProcess(targets, options)
    rc = nmproc.run()
    if rc != 0:
        print("nmap scan failed: {0}".format(nmproc.stderr))
    try:
        nmap_report = NmapParser.parse(nmproc.stdout)
    except NmapParserException as e:
        print("Exception raised while parsing scan: {0}".format(e.msg))
        parser.print_help()
        parser.exit()

    # Get OS version and search it by sve-search
    osinfo = {}
    host = nmap_report.hosts[0]
    for oscla in host.os.osmatches:
        serverinfo = oscla.name
        if (serverinfo):
            osinfo["name"] = serverinfo[:serverinfo.find(' ')]
            osinfo["osgen"] = serverinfo[serverinfo.find(' ') + 1:]
            break

    osresult = osinfo["name"] + ":" + osinfo["osgen"]
    if (len(osresult)!=0):
        osresult=osresult.replace(' ','')
        command = "/root/cve-search/bin/search.py -p " + osresult + " -o json"
        print('OS vulnerabilities result:')
        osfinalresult = os.popen(command)
        a = list()
        for l in osfinalresult:
            a.append(json.loads(l))
        if (len(a)!=0):
            for i in a:
                result_print(i)
        else:
            print('Congratulation! No vulnerabilities found~')
    else:
        print("Can't get OS version")

    # Get port status and search it by sve-search
    portinfo = host.services
    for service in portinfo:
        servicename = service.service
        servicestate = service.state
        if servicestate=='open':
            command = "/root/cve-search/bin/search.py -p " + servicename + " -o json"
            portfinalresult = os.popen(command)
            a = list()
            for l in portfinalresult:
                a.append(json.loads(l))
            if (len(a) != 0):
                print(servicename + ': ' + servicestate)
                for i in a:
                    result_print(i)
            else:
                print('Congratulation! No vulnerabilities found~')

def request_scan(url):

    try:
        r = requests.post(url, timeout=3)
    except:
        parser.print_help()
        parser.exit()

    headers = r.headers
    # Get server version and search it by sve-search
    server_get = headers.get('SERVER')
    if server_get:
        if (server_get.find('/') != -1):
            server = server_get[:server_get.find('/')]
            version = server_get[server_get.find('/') + 1:]
            server_get = server + ":" + version
        else:
            server_get = server_get

        command = "/root/cve-search/bin/search.py -p "+ server_get + " -o json"
        print(command)
        print('SERVER vulnerabilities result:')
        result = os.popen(command)
        a = list()
        for l in result:
            a.append(json.loads(l))

        for i in a:
            result_print(i)
    # Get language version and search it by sve-search
    language_get = headers.get('X-Powered-By')
    if language_get:
        if (language_get.find('/') != -1):
            language = language_get[:language_get.find('/')]
        else:
            language = language_get
        version = language_get[language_get.find('/')+1:]
        language_get = language + ":" + version
        command = "/root/cve-search/bin/search.py -p "+ language_get + " -o json"
        print(command)
        result = os.popen(command)
        a = list()
        for l in result:
            a.append(json.loads(l))

        for i in a:
            result_print(i)

# define the format of output
def result_print(result):
    id = result['id']
    references = result['references']
    print(id+': ')
    print(references)

if __name__ == "__main__":
    #scan a assets
    if scan:
        url = scan
        ip = re.match(r"\d+\.\d+\.\d+\.\d+$",url) #用户输入为ip 出错处理 e.g192.168.11.138.10只截取192.168.11.138
        if ip == None: #非ip
            pattern = re.match('(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$', url)
            if pattern == None: #不是ip也不是url 报错
                parser.print_help()
                parser.exit()
            else:
                http_url = "http://" + url
                request_scan(http_url)
        else:
            url = ip
        if options == '':
            options = '443,80'
        report = nmap_scan(url, "-p " +options+" -O")

